; ****************************************************************************
; flame.s (TRDOS 386, TRDOS v2.0 - sample binary file, 'flame.prg')
; ----------------------------------------------------------------------------
; FLAME.PRG ! TEST program !  TRDOS 386 VGA Functionality test !
;
; 10/08/2016
;
; [ Last Modification: 11/08/2016 ]
;
; Derived from disassembly of 'flame.com' file (188 bytes)
;
; Assembler: NASM 2.11

; Original code disassembler: IDA Pro Free (MASM syntax)
; 
; (Original -msdos- code has been modifed for TRDOS 386 system calls and
; other protected mode (TRDOS 386) interrupts.)
; ****************************************************************************

; 19/05/2016
; 29/04/2016
; TRDOS 386 system calls (temporary list!)
_ver 	equ 0
_exit 	equ 1
_fork 	equ 2
_read 	equ 3
_write	equ 4
_open	equ 5
_close 	equ 6
_wait 	equ 7
_creat 	equ 8
_link 	equ 9
_unlink	equ 10
_exec	equ 11
_chdir	equ 12
_time 	equ 13
_mkdir 	equ 14
_chmod	equ 15
_chown	equ 16
_break	equ 17
_stat	equ 18
_seek	equ 19
_tell 	equ 20
_mount	equ 21
_umount	equ 22
_setuid	equ 23
_getuid	equ 24
_stime	equ 25
_quit	equ 26	
_intr	equ 27
_fstat	equ 28
_emt 	equ 29
_mdate 	equ 30
_video	equ 31
_audio	equ 32
_ilgins	equ 33
_sleep	equ 34
_msg    equ 35
_geterr equ 36
_rsrvd1	equ 37
_pri	equ 38
_rele 	equ 39

%macro sys 1-4
    ; 29/04/2016 - TRDOS 386 (TRDOS v2.0)	
    ; 03/09/2015	
    ; 13/04/2015
    ; Retro UNIX 386 v1 system call.	
    %if %0 >= 2   
        mov ebx, %2
        %if %0 >= 3    
            mov ecx, %3
            %if %0 = 4
               mov edx, %4   
            %endif
        %endif
    %endif
    mov eax, %1
    ;int 30h
    int 40h ; TRDOS 386 (TRDOS v2.0)	   
%endmacro

; TRDOS 386 (and Retro UNIX 386 v1) system call format:
; sys systemcall (eax) <arg1 (ebx)>, <arg2 (ecx)>, <arg3 (edx)>

; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ;;	This file is generated by The Interactive Disassembler (IDA)	   ;;
; ;;	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	   ;;
; ;;			 Licensed to: Freeware version			   ;;
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\FLAME.COM
; Format      :	MS-DOS COM-file
; Base Address:	1000h Range: 10100h-101BCh Loaded length: BCh

; NOTE: Assembly source code of FLAME.COM (by IDA, in MASM syntax)
; has been modified to NASM syntax (for 386 protected mode & for TRDOS 386)
; by Erdogan Tan. (10/08/2016)

[BITS 32] ; We need 32-bit intructions for protected mode

[ORG 0] 

start:
		; DIRECT VGA MEMORY ACCESS
		;xor	ebx, ebx
		mov	bh, 5 ; Direct access/map to VGA memory (0A0000h)
		;mov	eax, _video ; 1Fh
		mov	al, 1Fh ; sys _video ; TRDOS 386 Video functions
		int	40h   ; TRDOS 386 system call

		; eax = 0A0000h
		and	eax, eax
		jz      terminate ; error (eax = 0)
		
		; ah = 0
		mov	al, 13h		; set video mode to 13h 
		;int	10h		; - VIDEO -
		int	31h  	; TRDOS 386 - VIDEO Interrupt

		mov	al, 3Fh
		mov	cx, 300h
		mov	edi, 0A00C0h
		rep	stosb
		mov	esi, 0A00BFh
		xor	ah, ah
		call	sub_101A8
		mov	ah, 1
		call	sub_101A8
		mov	esi, 0A00BEh
		call	sub_101A8
		mov	esi, 0A0000h
		call	sub_101A8

		xor	bx, bx
		mov	ax, 1012h
		mov	cl, 0FFh
		mov	edx, 0A0000h
		;int	10h	; - VIDEO - SET	BLOCK OF DAC REGISTERS (EGA, VGA/MCGA)
				; BX = starting	color register,	CX = number of registers to set
				; ES:DX	-> table of 3*CX bytes where each 3 byte group represents one
				; byte each of red, green and blue (0-63)
		int	31h  	; TRDOS 386 - VIDEO Interrupt		
loc_10133:
		mov	cx, 140h
		mov	edi, _1BAh
		xor	ah, ah
		mov	bl, 64h
loc_1013E:
		mov	al, [edi+27Fh]
		mov	dl, [edi+280h]
		; dh = 0
		add	ax, dx
		mov	dl, [edi+281h]
		add	ax, dx
		mov	dl, [edi+500h]
		add	ax, dx
		shr	ax, 2
		jz	short loc_1015B
		dec	al
loc_1015B:
		mov	[edi], al
		mov	dl, [edi+500h]
		add	ax, dx
		shr	ax, 1
		mov	[edi+140h], al
		inc	edi
		loop	loc_1013E
		mov	cx, 140h
		add	edi, ecx
		dec	bl
		jnz	short loc_1013E
		mov	edi, 0A0000h
		mov	esi, _1BAh
		mov	cx, 3B60h
		rep	movsd
		mov	edi, 0F8C0h + _1BAh  ;_FA7Ah
		mov	cx, 13Ch
loc_10185:
		;in	al, 40h		; Timer	8253-5 (AT: 8254.2).
	
		mov	bl, ah	
		; TRDOS 386 - IOCTL Interrupt (for ring 3)
		mov	ah, 0 ; in (byte)
		mov	dx, 40h
		; al = data byte
		; dx = port number
		int	34h ; TRDOS 386 - IOCTL 
		mov	ah, bl

		add	ax, [word_101B8]
		add	[word_101B8], ax
		mov	ah, al
		mov	[edi], ax
		mov	[edi+2], ax
		add	edi, 4
		dec	cx
		jnz	short loc_10185
		mov	ah, 1
		;int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
					; Return: ZF clear if character	in buffer
					; AH = scan code, AL = character
					; ZF set if no character in buffer
		int	32h	; TRDOS 386 - KEYBOARD Interrupt
                jz      loc_10133
		mov	ax, 3
		;int	10h		; - VIDEO - SET	VIDEO MODE
					; AL = mode
		int	31h  	; TRDOS 386 - VIDEO Interrupt	
terminate:
		sys 	_exit   ; INT 40h
here:
		jmp	short here

; -------------	S U B	R O U T	I N E ---------------------------------------

sub_101A8:
		mov	cl, 40h
		xor	al, al
loc_101AC:
		mov	[esi], al
		add	al, ah
		add	esi, 3
		loop	loc_101AC
		retn

; ---------------------------------------------------------------------------
		db	0
		db	'TRDOS 386'
		db	0
		db	'FLAME.PRG'
		db	0
		db	'ERDOGAN TAN'
		db	0
		db	'11/08/2016'
		db	0

word_101B8:	dw	8Dh
_1BAh:
		db	0
		db	0
