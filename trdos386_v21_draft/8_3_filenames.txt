8.3 filename

*************************************

From Wikipedia, the free encyclopedia

*************************************

An 8.3 filename (also called a short filename or SFN) is one 
that obeys the filename convention used by CP/M 
and old versions of DOS and versions of Microsoft Windows
prior to Windows 95 and Windows NT 3.5.
It is also used in modern Microsoft operating systems
as an alternate filename to the long filename,
to provide compatibility with legacy programs.
The filename convention is limited by the FAT file system.
Similar 8.3 file naming schemes have also existed on earlier CP/M,
TRS-80, Atari, and some Data General 
and Digital Equipment Corporation minicomputer operating systems.

Overview

8.3 filenames are limited to at most eight characters 
(after any directory specifier), followed optionally 
by a filename extension consisting of a period . 
and at most three further characters. For systems 
that only support 8.3 filenames, excess characters are ignored.
If a file name has no extension, a trailing . has no significance
(that is, myfile and myfile. are equivalent). 
Furthermore, file and directory names are uppercase in this system,
even though systems that use the 8.3 standard are usually 
case-insensitive (making CamelCap.tpu equivalent to the name CAMELCAP.TPU).
However, on non-8.3 operating systems 
(such as almost any modern operating system) accessing 8.3 file systems
(including DOS-formatted floppy disks, but also including some modern
memory cards and networked file systems), 
the underlying system may alter filenames internally to preserve case
and avoid truncating letters in the names,
for example in the case of VFAT.

VFAT and computer-generated 8.3 filenames

VFAT, a variant of FAT with an extended directory format, 
was introduced in Windows 95 and Windows NT 3.5. 
It allowed mixed-case Unicode long filenames (LFNs) 
in addition to classic 8.3 names by using multiple 
32-byte directory entry records for long filenames 
(in such a way that old 8.3 system software will only recognize one
as the valid directory entry).

To maintain backward-compatibility with legacy applications
(on DOS and Windows 3.1), on FAT and VFAT filesystems, 
the operating system automatically generates an 8.3 filename for every LFN,
through which the file can [also] be opened, renamed, or deleted, 
although the generated name (e.g. OVI3KV~N) may show little similarity 
to the original. The generation of 8.3 filenames on NTFS filesystems 
can be turned off system-wide (with risks).

The 8.3 filename can be obtained using the Kernel32.dll function 
GetShortPathName.

Although there is no compulsory algorithm for creating the 8.3 name from an LFN,
Windows uses the following convention:

    If the LFN is 8.3 uppercase, no LFN will be stored on disk at all.
        Example: TEXTFILE.TXT
    If the LFN is 8.3 mixed case, the LFN will store the mixed-case name, 
	while the 8.3 name will be an uppercase version of it.
        Example: TextFile.Txt becomes TEXTFILE.TXT.
    If the LFN contains more than 8 characters, invalid characters such as space
       (which was disallowed by convention though not by the APIs) 
        and those disallowed within directory tables, or an extension more than
        3 characters long, the name is stripped of its invalid characters. 
        If the name begins with periods . the leading periods are removed. 
        Other characters such as + are changed to the underscore _, and letters 
        are put in uppercase. The stripped name is then truncated to 
        the first 6 characters of its basename, followed by a tilde, 
        followed by a single digit, followed by a period ., 
        followed by the first 3 characters of the extension.
        Example: TextFile.Mine.txt becomes TEXTFI~1.TXT
        (or TEXTFI~2.TXT, should TEXTFI~1.TXT already exist). 
        ver +1.2.text becomes VER_12~1.TEX. .bashrc.swp becomes BASHRC~1.SWP
    On all NT versions including Windows 2000 and later, if at least 4 files
        or folders already exist with the same extension and first 6 characters
        in their short names, the stripped LFN is instead truncated to
        the first 2 characters of the basename 
        (or 1 if the basename has only 1 character), followed by 4 hexadecimal
        digits derived from an undocumented hash of the filename, 
        followed by a tilde, followed by a single digit, followed by a period .,
        followed by the first 3 characters of the extension.
        Example: TextFile.Mine.txt becomes TE021F~1.TXT.
    On Windows 95, 98 and ME, if more than 9 files or folders with the same
	extension and first 6 characters and in their short names 
	(so that ~1 through ~9 suffixes aren't enough to resolve the collision),
	the name is further truncated to 5 letters, followed by a tilde,
	followed by two digits starting from 10, followed by a period . 
	and the first 3 characters of the extension.
        Example: TextFile.Mine.txt becomes TEXTF~10.TXT if TEXTFI~1.TXT
	through TEXTFI~9.TXT all exist already.

During the 2001 Microsoft antitrust case, the names MICROS~1 and
MICROS~2 were humorously used to refer to the companies that might exist
after a proposed split of Microsoft.

NTFS, a file system used by the Windows NT family, supports LFNs natively,
but 8.3 names are still available for legacy applications.
Windows NTVDM are known to use 8.3 names.
This can optionally be disabled system-wide to improve performance 
in situations where large numbers of similarly named files exist 
in the same folder.[1] 8.3 filename creation can be disabled 
system-wide and/or per-volume, and existing 8.3 filenames can be stripped
using fsutil or a Registry key.

The ISO 9660 file system (mainly used on compact discs) has similar limitations
at the most basic Level 1, with the additional restriction that directory names
cannot contain extensions and that some characters (notably hyphens)
are not allowed in filenames. Level 2 allows filenames of up to 31 characters,
more compatible with classic AmigaOS and classic Mac OS filenames.

On VFAT and NTFS file systems, 8.3 filenames are stored as ANSI encoding,
for backward-compatibility.

The ReFS no longer supports 8.3 filenames.

Compatibility

This legacy technology is used in a wide range of products and devices, 
as a standard for interchanging information, such as compact flash cards
used in cameras. VFAT LFN long filenames introduced by Windows 95/98/ME
retained compatibility, but the VFAT LFN used on NT-based systems
(Windows NT/2K/XP) uses a modified 8.3 shortname.

If a filename contains only lowercase letters, or is a combination of
a lowercase basename with an uppercase extension, or vice versa; 
and has no special characters, and fits within the 8.3 limits,
a VFAT entry is not created on Windows NT and later versions such as XP.
Instead, two bits in byte 0x0c of the directory entry are used to indicate
that the filename should be considered as entirely or partially lowercase.
Specifically, bit 4 means lowercase extension and bit 3 lowercase basename,
which allows for combinations such as example.TXT or HELLO.txt 
but not Mixed.txt. Few other operating systems support this.
This creates a backward-compatibility filename mangling problem
with older Windows versions (95, 98, ME) that 
see all-uppercase filenames if this extension has been used, 
and therefore can change the capitalization of a file 
when it is transported, such as on a USB flash drive.
This can cause problems for operating systems that do not exhibit
the case-insensitive filename behavior as DOS and Windows do.
Linux will recognize this extension when reading;
the mount option shortname determines whether this feature
is used when writing.
For MS-DOS, Henrik Haftmann's DOSLFN may be used.

Directory table

Main article: FAT directory table

A directory table is a special type of file that represents a directory. 
Each file or directory stored within it is represented by a 32-byte entry
in the table. Each entry records the name, extension, 
attributes (archive, directory, hidden, read-only, system and volume), 
the date and time of creation, the address of the first cluster 
of the file/directory's data and finally the size of the file/directory.

Legal characters for DOS filenames include the following:

    Uppercase letters A–Z
    Numbers 0–9
    Space (though trailing spaces in either the base name 
	or the extension are considered to be padding 
	and not a part of the filename, also filenames with spaces
	in them must be enclosed in quotes to be used on a DOS command line,
	and if the DOS command is built programmatically, 
	the filename must be enclosed in double double-quotes (""..."")
	when viewed as a variable within the program building the DOS command.)

    !, #, $, %, &, ', (, ), -, @, ^, _, `, {, }, ~
    
    Values 128–255 (though if NLS services are active in DOS, 
    some characters interpreted as lowercase are invalid and unavailable)

This excludes the following ASCII characters:

    ", *, +, ,, /, :, ;, <, =, >, ?, \, [, ], |[11]
    MS-DOS has no shell escape character
    . (U+002E . FULL STOP) within name and extension fields,
    except in . and .. entries (see below)
    Lowercase letters a–z, stored as A–Z on FAT12/FAT16
    Control characters 0–31
    Value 127 (DEL) [dubious – discuss]

The DOS filenames are in the OEM character set.
Code 0xE5 as the first byte (see below) causes issues
when extra-ASCII characters are used.

Directory entries, both in the Root Directory Region and in subdirectories,
are of the following format:
Further information: FAT directory entry

Byte Offset 	Length 	Description
0x00 	8 	DOS filename (padded with spaces)

The first byte can have the following special values:
0x00 	Entry is available and no subsequent entry is in use
0x05 	Initial character is actually 0xE5
0x2E 	Dot entry: either . or ..
0xE5 	Entry has been previously erased. 
	File undelete utilities must replace this character 
	with a regular character as part of the undeletion process.
0x08 	3 	DOS file extension (padded with spaces, may be empty)
0x0b 	1 	File Attributes

The first byte can have the following special values:
Bit 	Mask 	Description
0 	0x01 	Read Only
1 	0x02 	Hidden
2 	0x04 	System
3 	0x08 	Volume Label
4 	0x10 	Subdirectory
5 	0x20 	Archive
6 	0x40 	Device (internal use only, never found on disk)
7 	0x80 	Unused

An attribute value of 0x0F is used to designate a long filename entry.
0x0c 	1 	Reserved; two bits are used by NT and later versions
		to encode case information
0x0d 	1 	Create time, fine resolution: 10 ms units,
		values from 0 to 199.
0x0e 	2 	Create time. The hour, minute and second are encoded
		according to the following bitmap:
Bits 	Description
15–11 	Hours (0–23)
10–5 	Minutes (0–59)
4–0 	Seconds/2 (0–29)

Note that the seconds is recorded only to a 2 second resolution. 
Finer resolution for file creation is found at offset 0x0d.
0x10 	2 	Create date. The year, month, and day are encoded
		according to the following bitmap:
Bits 	Description
15–9 	Year (0 = 1980, 127 = 2107)
8–5 	Month (1 = January, 12 = December)
4–0 	Day (1–31)
0x12 	2 	Last access date; see offset 0x10 for description.
0x14 	2 	EA-Index (used by OS/2 and NT) in FAT12 and FAT16,
		High 2 bytes of first cluster number in FAT32
0x16 	2 	Last modified time; see offset 0x0e for description.
0x18 	2 	Last modified date; see offset 0x10 for description.
0x1a 	2 	First cluster in FAT12 and FAT16. 
		Low 2 bytes of first cluster in FAT32.
0x1c 	4 	File size

Working with short filenames in a command prompt

Sometimes it may be desirable to convert a long filename to a short filename,
for example when working with the command prompt.
A few simple rules can be followed to attain the correct 8.3 filename.

    A SFN filename can have at most 8 characters before the dot. 
    If it has more than that, the first 6 must be written, then a tilde ~
    as the seventh character and a number (usually 1) as the eighth.
    The number distinguishes it from other files with both the same first
    six letters and the same extension.
    Dots are important and must be used even for folder names
    (if there is a dot in the folder name). 
    If there are multiple dots in the long file/directory name, 
    only the last one is used. The preceding dots should be ignored.
    If there are more characters than three after the final dot, 
    only the first three are used.
    
    Generally:
      Any spaces in the filenames should be ignored when converting to SFN.
      Ignore all periods except the last one. Do not include any other periods,
      just like the spaces. Use the last period if any, and the next characters
      (up to 3). For instance, for .manifest, .man only would be used.
      Commas, square brackets, semicolons, = signs and + signs are changed
      to underscores.
      Case is not important; upper case and lower case characters are treated
      equally.

To find out for sure the SFN or 8.3 names of the files in a directory

use: dir /x shows the short names if there is one, and the long names.

or: dir /-n shows only the short names, in the original DIR listing format.

In Windows NT-based operating systems, the command prompt applet
 (cmd.exe) accepts long filenames with wildcard characters
 (question mark ? and asterisk *); 
 long filenames with spaces in them need to be escaped
 (i.e. enclosed in single or double quotes).

Starting with Windows Vista, console commands and PowerShell applets
perform limited pattern matching by allowing wildcards in filename
and each subdirectory in the file path and silently substituting
the first matching directory entry
(for example, C:\>CD \prog*\inter* will change the current directory
to C:\Program Files\Internet Explorer\).

Erdogan Tan - 20/05/2025
